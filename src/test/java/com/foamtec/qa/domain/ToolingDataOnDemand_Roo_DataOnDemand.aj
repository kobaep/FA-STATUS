// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.foamtec.qa.domain;

import com.foamtec.qa.domain.Tooling;
import com.foamtec.qa.domain.ToolingDataOnDemand;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.stereotype.Component;

privileged aspect ToolingDataOnDemand_Roo_DataOnDemand {
    
    declare @type: ToolingDataOnDemand: @Component;
    
    private Random ToolingDataOnDemand.rnd = new SecureRandom();
    
    private List<Tooling> ToolingDataOnDemand.data;
    
    public Tooling ToolingDataOnDemand.getNewTransientTooling(int index) {
        Tooling obj = new Tooling();
        setCarvity(obj, index);
        setToolingType(obj, index);
        setVendorName(obj, index);
        return obj;
    }
    
    public void ToolingDataOnDemand.setCarvity(Tooling obj, int index) {
        Integer carvity = new Integer(index);
        obj.setCarvity(carvity);
    }
    
    public void ToolingDataOnDemand.setToolingType(Tooling obj, int index) {
        String toolingType = "toolingType_" + index;
        obj.setToolingType(toolingType);
    }
    
    public void ToolingDataOnDemand.setVendorName(Tooling obj, int index) {
        String vendorName = "vendorName_" + index;
        obj.setVendorName(vendorName);
    }
    
    public Tooling ToolingDataOnDemand.getSpecificTooling(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        Tooling obj = data.get(index);
        Long id = obj.getId();
        return Tooling.findTooling(id);
    }
    
    public Tooling ToolingDataOnDemand.getRandomTooling() {
        init();
        Tooling obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return Tooling.findTooling(id);
    }
    
    public boolean ToolingDataOnDemand.modifyTooling(Tooling obj) {
        return false;
    }
    
    public void ToolingDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = Tooling.findToolingEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'Tooling' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<Tooling>();
        for (int i = 0; i < 10; i++) {
            Tooling obj = getNewTransientTooling(i);
            try {
                obj.persist();
            } catch (final ConstraintViolationException e) {
                final StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    final ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getRootBean().getClass().getName()).append(".").append(cv.getPropertyPath()).append(": ").append(cv.getMessage()).append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
                }
                throw new IllegalStateException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}

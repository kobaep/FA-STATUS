// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.foamtec.qa.domain;

import com.foamtec.qa.domain.FaRequestDataOnDemand;
import com.foamtec.qa.domain.TypeOfRequest;
import com.foamtec.qa.domain.TypeOfRequestDataOnDemand;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect TypeOfRequestDataOnDemand_Roo_DataOnDemand {
    
    declare @type: TypeOfRequestDataOnDemand: @Component;
    
    private Random TypeOfRequestDataOnDemand.rnd = new SecureRandom();
    
    private List<TypeOfRequest> TypeOfRequestDataOnDemand.data;
    
    @Autowired
    FaRequestDataOnDemand TypeOfRequestDataOnDemand.faRequestDataOnDemand;
    
    public TypeOfRequest TypeOfRequestDataOnDemand.getNewTransientTypeOfRequest(int index) {
        TypeOfRequest obj = new TypeOfRequest();
        setName(obj, index);
        setQty(obj, index);
        setTool(obj, index);
        return obj;
    }
    
    public void TypeOfRequestDataOnDemand.setName(TypeOfRequest obj, int index) {
        String name = "name_" + index;
        obj.setName(name);
    }
    
    public void TypeOfRequestDataOnDemand.setQty(TypeOfRequest obj, int index) {
        Integer qty = new Integer(index);
        obj.setQty(qty);
    }
    
    public void TypeOfRequestDataOnDemand.setTool(TypeOfRequest obj, int index) {
        String tool = "tool_" + index;
        obj.setTool(tool);
    }
    
    public TypeOfRequest TypeOfRequestDataOnDemand.getSpecificTypeOfRequest(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        TypeOfRequest obj = data.get(index);
        Long id = obj.getId();
        return TypeOfRequest.findTypeOfRequest(id);
    }
    
    public TypeOfRequest TypeOfRequestDataOnDemand.getRandomTypeOfRequest() {
        init();
        TypeOfRequest obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return TypeOfRequest.findTypeOfRequest(id);
    }
    
    public boolean TypeOfRequestDataOnDemand.modifyTypeOfRequest(TypeOfRequest obj) {
        return false;
    }
    
    public void TypeOfRequestDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = TypeOfRequest.findTypeOfRequestEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'TypeOfRequest' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<TypeOfRequest>();
        for (int i = 0; i < 10; i++) {
            TypeOfRequest obj = getNewTransientTypeOfRequest(i);
            try {
                obj.persist();
            } catch (final ConstraintViolationException e) {
                final StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    final ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getRootBean().getClass().getName()).append(".").append(cv.getPropertyPath()).append(": ").append(cv.getMessage()).append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
                }
                throw new IllegalStateException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}

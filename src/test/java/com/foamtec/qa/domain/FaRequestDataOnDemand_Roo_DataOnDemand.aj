// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.foamtec.qa.domain;

import com.foamtec.qa.domain.FaRequest;
import com.foamtec.qa.domain.FaRequestDataOnDemand;
import com.foamtec.qa.domain.ToolingDataOnDemand;
import com.foamtec.qa.security.AppUserDataOnDemand;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect FaRequestDataOnDemand_Roo_DataOnDemand {
    
    declare @type: FaRequestDataOnDemand: @Component;
    
    private Random FaRequestDataOnDemand.rnd = new SecureRandom();
    
    private List<FaRequest> FaRequestDataOnDemand.data;
    
    @Autowired
    AppUserDataOnDemand FaRequestDataOnDemand.appUserDataOnDemand;
    
    @Autowired
    ToolingDataOnDemand FaRequestDataOnDemand.toolingDataOnDemand;
    
    public FaRequest FaRequestDataOnDemand.getNewTransientFaRequest(int index) {
        FaRequest obj = new FaRequest();
        setActionBy(obj, index);
        setApqpNumber(obj, index);
        setBatchMat1(obj, index);
        setBatchMat2(obj, index);
        setBatchMat3(obj, index);
        setCreateDate(obj, index);
        setCustomer(obj, index);
        setDocumentRequest(obj, index);
        setDocumentSaleCo(obj, index);
        setEngApprovel(obj, index);
        setEngReson(obj, index);
        setEngSendWorkDate(obj, index);
        setEngWorkCommitDate(obj, index);
        setFaApprovel(obj, index);
        setFaForApproveQty(obj, index);
        setFaForPccQty(obj, index);
        setFaForSaleQty(obj, index);
        setFaForTestQty(obj, index);
        setFaNumber(obj, index);
        setFaReson(obj, index);
        setFlow(obj, index);
        setMat1(obj, index);
        setMat2(obj, index);
        setMat3(obj, index);
        setNeedDate(obj, index);
        setPartNumber(obj, index);
        setProcess(obj, index);
        setProductGroup(obj, index);
        setProjectOwner(obj, index);
        setQuatationWorkSheet(obj, index);
        setRevision(obj, index);
        setSaleApprovel(obj, index);
        setSaleCoSendWorkTo(obj, index);
        setSaleRemark(obj, index);
        setStatus(obj, index);
        return obj;
    }
    
    public void FaRequestDataOnDemand.setActionBy(FaRequest obj, int index) {
        String actionBy = "actionBy_" + index;
        obj.setActionBy(actionBy);
    }
    
    public void FaRequestDataOnDemand.setApqpNumber(FaRequest obj, int index) {
        String apqpNumber = "apqpNumber_" + index;
        obj.setApqpNumber(apqpNumber);
    }
    
    public void FaRequestDataOnDemand.setBatchMat1(FaRequest obj, int index) {
        String batchMat1 = "batchMat1_" + index;
        obj.setBatchMat1(batchMat1);
    }
    
    public void FaRequestDataOnDemand.setBatchMat2(FaRequest obj, int index) {
        String batchMat2 = "batchMat2_" + index;
        obj.setBatchMat2(batchMat2);
    }
    
    public void FaRequestDataOnDemand.setBatchMat3(FaRequest obj, int index) {
        String batchMat3 = "batchMat3_" + index;
        obj.setBatchMat3(batchMat3);
    }
    
    public void FaRequestDataOnDemand.setCreateDate(FaRequest obj, int index) {
        Date createDate = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setCreateDate(createDate);
    }
    
    public void FaRequestDataOnDemand.setCustomer(FaRequest obj, int index) {
        String customer = "customer_" + index;
        obj.setCustomer(customer);
    }
    
    public void FaRequestDataOnDemand.setDocumentRequest(FaRequest obj, int index) {
        String documentRequest = "documentRequest_" + index;
        obj.setDocumentRequest(documentRequest);
    }
    
    public void FaRequestDataOnDemand.setDocumentSaleCo(FaRequest obj, int index) {
        String documentSaleCo = "documentSaleCo_" + index;
        obj.setDocumentSaleCo(documentSaleCo);
    }
    
    public void FaRequestDataOnDemand.setEngApprovel(FaRequest obj, int index) {
        String engApprovel = "engApprovel_" + index;
        obj.setEngApprovel(engApprovel);
    }
    
    public void FaRequestDataOnDemand.setEngReson(FaRequest obj, int index) {
        String engReson = "engReson_" + index;
        obj.setEngReson(engReson);
    }
    
    public void FaRequestDataOnDemand.setEngSendWorkDate(FaRequest obj, int index) {
        Date engSendWorkDate = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setEngSendWorkDate(engSendWorkDate);
    }
    
    public void FaRequestDataOnDemand.setEngWorkCommitDate(FaRequest obj, int index) {
        Date engWorkCommitDate = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setEngWorkCommitDate(engWorkCommitDate);
    }
    
    public void FaRequestDataOnDemand.setFaApprovel(FaRequest obj, int index) {
        String faApprovel = "faApprovel_" + index;
        obj.setFaApprovel(faApprovel);
    }
    
    public void FaRequestDataOnDemand.setFaForApproveQty(FaRequest obj, int index) {
        Integer faForApproveQty = new Integer(index);
        obj.setFaForApproveQty(faForApproveQty);
    }
    
    public void FaRequestDataOnDemand.setFaForPccQty(FaRequest obj, int index) {
        Integer faForPccQty = new Integer(index);
        obj.setFaForPccQty(faForPccQty);
    }
    
    public void FaRequestDataOnDemand.setFaForSaleQty(FaRequest obj, int index) {
        Integer faForSaleQty = new Integer(index);
        obj.setFaForSaleQty(faForSaleQty);
    }
    
    public void FaRequestDataOnDemand.setFaForTestQty(FaRequest obj, int index) {
        Integer faForTestQty = new Integer(index);
        obj.setFaForTestQty(faForTestQty);
    }
    
    public void FaRequestDataOnDemand.setFaNumber(FaRequest obj, int index) {
        String faNumber = "faNumber_" + index;
        obj.setFaNumber(faNumber);
    }
    
    public void FaRequestDataOnDemand.setFaReson(FaRequest obj, int index) {
        String faReson = "faReson_" + index;
        obj.setFaReson(faReson);
    }
    
    public void FaRequestDataOnDemand.setFlow(FaRequest obj, int index) {
        String flow = "flow_" + index;
        obj.setFlow(flow);
    }
    
    public void FaRequestDataOnDemand.setMat1(FaRequest obj, int index) {
        String mat1 = "mat1_" + index;
        obj.setMat1(mat1);
    }
    
    public void FaRequestDataOnDemand.setMat2(FaRequest obj, int index) {
        String mat2 = "mat2_" + index;
        obj.setMat2(mat2);
    }
    
    public void FaRequestDataOnDemand.setMat3(FaRequest obj, int index) {
        String mat3 = "mat3_" + index;
        obj.setMat3(mat3);
    }
    
    public void FaRequestDataOnDemand.setNeedDate(FaRequest obj, int index) {
        Date needDate = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setNeedDate(needDate);
    }
    
    public void FaRequestDataOnDemand.setPartNumber(FaRequest obj, int index) {
        String partNumber = "partNumber_" + index;
        obj.setPartNumber(partNumber);
    }
    
    public void FaRequestDataOnDemand.setProcess(FaRequest obj, int index) {
        String process = "process_" + index;
        obj.setProcess(process);
    }
    
    public void FaRequestDataOnDemand.setProductGroup(FaRequest obj, int index) {
        String productGroup = "productGroup_" + index;
        obj.setProductGroup(productGroup);
    }
    
    public void FaRequestDataOnDemand.setProjectOwner(FaRequest obj, int index) {
        String projectOwner = "projectOwner_" + index;
        obj.setProjectOwner(projectOwner);
    }
    
    public void FaRequestDataOnDemand.setQuatationWorkSheet(FaRequest obj, int index) {
        String quatationWorkSheet = "quatationWorkSheet_" + index;
        obj.setQuatationWorkSheet(quatationWorkSheet);
    }
    
    public void FaRequestDataOnDemand.setRevision(FaRequest obj, int index) {
        String revision = "revision_" + index;
        obj.setRevision(revision);
    }
    
    public void FaRequestDataOnDemand.setSaleApprovel(FaRequest obj, int index) {
        String saleApprovel = "saleApprovel_" + index;
        obj.setSaleApprovel(saleApprovel);
    }
    
    public void FaRequestDataOnDemand.setSaleCoSendWorkTo(FaRequest obj, int index) {
        String saleCoSendWorkTo = "saleCoSendWorkTo_" + index;
        obj.setSaleCoSendWorkTo(saleCoSendWorkTo);
    }
    
    public void FaRequestDataOnDemand.setSaleRemark(FaRequest obj, int index) {
        String saleRemark = "saleRemark_" + index;
        obj.setSaleRemark(saleRemark);
    }
    
    public void FaRequestDataOnDemand.setStatus(FaRequest obj, int index) {
        String status = "status_" + index;
        obj.setStatus(status);
    }
    
    public FaRequest FaRequestDataOnDemand.getSpecificFaRequest(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        FaRequest obj = data.get(index);
        Long id = obj.getId();
        return FaRequest.findFaRequest(id);
    }
    
    public FaRequest FaRequestDataOnDemand.getRandomFaRequest() {
        init();
        FaRequest obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return FaRequest.findFaRequest(id);
    }
    
    public boolean FaRequestDataOnDemand.modifyFaRequest(FaRequest obj) {
        return false;
    }
    
    public void FaRequestDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = FaRequest.findFaRequestEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'FaRequest' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<FaRequest>();
        for (int i = 0; i < 10; i++) {
            FaRequest obj = getNewTransientFaRequest(i);
            try {
                obj.persist();
            } catch (final ConstraintViolationException e) {
                final StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    final ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getRootBean().getClass().getName()).append(".").append(cv.getPropertyPath()).append(": ").append(cv.getMessage()).append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
                }
                throw new IllegalStateException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
